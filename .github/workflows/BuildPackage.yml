name: Build Package

on:
  create

jobs:
  build:

    runs-on: ubuntu-latest
    if: ${{ github.event.ref_type == 'branch' && startsWith(github.event.ref, 'release/') }}

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x

    - name: Restore dependencies
      run: dotnet restore i502Club.Ccrs.csproj
      working-directory: i502Club.Ccrs

    - name: Build
      run: dotnet build i502Club.Ccrs.csproj --no-restore --configuration Release
      working-directory: i502Club.Ccrs

    - name: Test
      run: dotnet test --logger "console;verbosity=detailed" --collect:"XPlat Code Coverage"
      working-directory: i502Club.Ccrs.Tests

    - name: Install report generator
      run: dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: Generate coverage report
      run: reportgenerator -reports:**/coverage.cobertura.xml -targetdir:./i502Club.Ccrs.Tests
    - uses: actions/upload-artifact@v3
      with:
        name: coverage
        path: i502Club.Ccrs.Tests

    - name: Get the release branch version
      uses: valadas/get-release-branch-version@v1.0.1
      id: branchVersion

    - name: Create Release Notes
      uses: johnyherangi/create-release-notes@main
      id: create-release-notes
      env:
          GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
      with:
          tag_name: v${{ steps.branchVersion.outputs.major }}.${{ steps.branchVersion.outputs.minor }}.${{ steps.branchVersion.outputs.patch }}
          release_name: i502Club.Ccrs v${{ steps.branchVersion.outputs.major }}.${{ steps.branchVersion.outputs.minor }}.${{ steps.branchVersion.outputs.patch }}
          body: ${{ steps.create-release-notes.outputs.release-notes }}
          draft: true
          prerelease: true

    - name: Create Release Zip Archive 
      uses: thedoctor0/zip-release@master
      with:
        type: 'zip'
        filename: 'release_v${{ steps.branchVersion.outputs.major }}.${{ steps.branchVersion.outputs.minor }}.${{ steps.branchVersion.outputs.patch }}.zip'
        exclusions: '*.git* /*node_modules/* .editorconfig'

    - name: Upload Release Zip Asset
      uses: actions/github-script@v3
      with:
       github-token: ${{secrets.CI_TOKEN}}
       script: |
        const path = require('path');
        const fs = require('fs');
        const release_id = '${{ needs.create_release.outputs.id }}';
          for (let file of await fs.readdirSync('./')) {
            if (path.extname(file) === '.zip') {
              console.log('uploadReleaseAsset', file);
              await github.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release_id,
                name: file,
                data: await fs.readFileSync(`./${file}`)
              });
            }
          }

    - name: Create Nuget Feed Source
      run: dotnet nuget add source --username i502Club --password ${{ secrets.CI_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/i502Club/index.json"
      working-directory: i502Club.Ccrs

    - name: Pack Nuget
      run: dotnet pack i502Club.Ccrs.csproj
      working-directory: i502Club.Ccrs

    - name: Push Nuget
      run: dotnet nuget push "bin/**.nupkg" --skip-duplicate --api-key ${{ secrets.CI_TOKEN }} --source "https://nuget.pkg.github.com/i502Club/index.json"
      working-directory: i502Club.Ccrs
